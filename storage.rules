// /home/ubuntu/community-app/storage.rules
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Profile Images: 
    // - Authenticated users can upload their own profile picture.
    // - Anyone can read profile pictures (as they are public).
    // - File size and type should be validated client-side and potentially server-side (e.g. Cloud Function trigger).
    match /profile_images/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId
                   // Optional: Add size and content type checks if possible in rules, though limited
                   // && request.resource.size < 5 * 1024 * 1024 // e.g., 5MB
                   // && request.resource.contentType.matches('image/.*');
                   && fileName.matches('^[^/]+$'); // Ensure filename is simple and not a path
    }

    // Cover Photos: 
    // - Authenticated users can upload their own cover photo.
    // - Anyone can read cover photos.
    match /cover_images/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId
                   // && request.resource.size < 5 * 1024 * 1024
                   // && request.resource.contentType.matches('image/.*');
                   && fileName.matches('^[^/]+$');
    }

    // Post Images:
    // - Authenticated users can upload images for their posts.
    // - Anyone can read post images.
    // - The path includes userId to associate storage with the user who uploaded it.
    match /posts/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId
                   // && request.resource.size < 5 * 1024 * 1024
                   // && request.resource.contentType.matches('image/.*');
                   && fileName.matches('^[^/]+$');
    }
  }
}

